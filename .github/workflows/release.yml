name: Release Assets Workflow

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Choose the release type"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
      is_prerelease:
        description: "Is this a pre-release?"
        required: false
        type: boolean
        default: false
      prerelease_id:
        description: "Prerelease identifier (e.g., alpha, beta, rc). Used only if is_prerelease=true."
        required: false
        type: string
        default: "alpha"

jobs:
  build-and-upload:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Build project
        run: make build

      - name: Install dbmate
        run: |
          sudo curl -fsSL -o /usr/local/bin/dbmate https://github.com/amacneil/dbmate/releases/latest/download/dbmate-linux-amd64
          sudo chmod +x /usr/local/bin/dbmate
          /usr/local/bin/dbmate --help

      - name: Run database migrations
        run: make migrateup

      - name: Run the application
        run: make run

      - name: Calculate version
        id: calculate_version
        run: |
          # Get the latest tag or default to v0.0.0 if none
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Split tag into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "${LATEST_TAG//v/}"

          # Increment version based on release type
          case "${{ github.event.inputs.release_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          # Construct new version
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

          # Add prerelease identifier if is_prerelease is true
          if [ "${{ github.event.inputs.is_prerelease }}" = "true" ]; then
            NEW_VERSION="${NEW_VERSION}-${{ github.event.inputs.prerelease_id }}"
          fi

          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Calculated version: $NEW_VERSION"

      - name: Create GitHub Release
        uses: elgohr/Github-Release-Action@20240816194204
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          prerelease: ${{ github.event.inputs.is_prerelease }}

      - name: Rename quran.db to include version
        run: |
          mv quran.db quran-${{ env.VERSION }}.db

      - name: Upload quran-${{ env.VERSION }}.db to Cloudflare R2
        run: aws s3 cp quran-${{ env.VERSION }}.db s3://quran-db/quran-${{ env.VERSION }}.db --endpoint-url ${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}

      - name: Upload quran-${{ env.VERSION }}.db to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          files: |
            quran-${{ env.VERSION }}.db
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload bin/* and quran-${{ env.VERSION }}.db to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          files: |
            ./bin/*
            quran-${{ env.VERSION }}.db
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
